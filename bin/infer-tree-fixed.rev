taxa <- readTaxonData("diagnosed.taxa")
tree <- readTrees("tree.fbd.tre")[1]

for(i in 1:taxa.size())
{
    if(taxa[i].getAge() > 0.0)
    {
         taxa[i] <- taxon(taxa[i].getName(),min=tree.nodeAge(tree.tipIndex(taxa[i])),max=max(v(tree.nodeAge(tree.tipIndex(taxa[i])),taxa[i].getMaxAge())))
    }
}

mvi = 1

source("../../prior.rev")

rho <- 1.0

### Define the tree-prior distribution as the fossilized birth-death process ###
maxage <- 0.0

for(i in 1:taxa.size())
{
	if( taxa[i].getMaxAge() > maxage )
	{
		maxage <- taxa[i].getMaxAge()
	}
}

origin_time ~ dnUniform(maxage,maxage*2)

moves[mvi++] = mvScale(origin_time, lambda=0.01, weight=3)
moves[mvi++] = mvScale(origin_time, lambda=0.1,  weight=3)
moves[mvi++] = mvScale(origin_time, lambda=1,    weight=3)

### Define the tree-prior distribution as the fossilized birth-death process ###
fbd_tree ~ dnFBDRP(origin=origin_time, lambda=lambda, mu=mu, psi=psi, rho=rho, taxa=taxa)
fbd_tree.setValue(tree)

#moves[mvi++] = mvFNPR(fbd_tree, weight=15.0)
#moves[mvi++] = mvCollapseExpandFossilBranch(fbd_tree, origin_time, weight=6.0)
#moves[mvi++] = mvFossilTimeSlideUniform(fbd_tree, weight=20.0)
moves[mvi++] = mvNodeTimeSlideUniform(fbd_tree, weight=20.0)
moves[mvi++] = mvRootTimeSlideUniform(fbd_tree, origin_time, weight=5.0)

mymodel = model(fbd_tree)

mni = 1

# Create a vector of monitors #
monitors[mni++] = mnModel(filename="rb.log", printgen=10)

# Initialize the MCMC object #
mymcmc = mcmc(mymodel, monitors, moves, moveschedule="random")

# Run the MCMC #
mymcmc.run(generations=10000)

# Quit RevBayes #
q()
