taxa <- readTaxonData("diagnosed.taxa")

mvi = 1

source("../../prior.rev")

rho <- 1.0

### Define the tree-prior distribution as the fossilized birth-death process ###
maxage <- 0.0

for(i in 1:taxa.size())
{
	if( taxa[i].getMaxAge() > maxage )
	{
		maxage <- taxa[i].getMaxAge()
	}
}

origin_time ~ dnUniform(maxage,maxage*3)

moves[mvi++] = mvScale(origin_time, lambda=0.01, weight=3)
moves[mvi++] = mvScale(origin_time, lambda=0.1,  weight=3)
moves[mvi++] = mvScale(origin_time, lambda=1,    weight=3)

### Define the tree-prior distribution as the fossilized birth-death process ###
fbd_tree ~ dnFBDRP(origin=origin_time, lambda=lambda, mu=mu, psi=psi, rho=rho, taxa=taxa, extended=false)

moves[mvi++] = mvFNPR(fbd_tree, weight=15.0)
moves[mvi++] = mvCollapseExpandFossilBranch(fbd_tree, origin_time, weight=6.0)
#moves[mvi++] = mvFossilTimeSlideUniform(fbd_tree, weight=20.0)
moves[mvi++] = mvNodeTimeSlideUniform(fbd_tree, weight=20.0)
moves[mvi++] = mvRootTimeSlideUniform(fbd_tree, origin_time, weight=5.0)

mymodel = model(fbd_tree)

mni = 1

# Create a vector of monitors #
monitors[mni++] = mnModel(filename="rb-sampled.log", printgen=100)
#monitors[mni++] = mnFile(filename="rb.trees", printgen=10, fbd_tree)

# Initialize the MCMC object #
mymcmc = mcmc(mymodel, monitors, moves, moveschedule="random")

# Run the MCMC #
mymcmc.run(generations=100000)

# Quit RevBayes #
q()
